// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RC.CheckingAccount.Repository.Context;

namespace RC.CheckingAccount.Repository.Migrations
{
    [DbContext(typeof(CheckingAccountContext))]
    [Migration("20220124025228_initial-migration")]
    partial class initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RC.CheckingAccount.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateOfCreation")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateOfExclusion")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateOfModify")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("RC.CheckingAccount.Domain.Entities.Credit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateOfCreation")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateOfExclusion")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateOfModify")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("RC.CheckingAccount.Domain.Entities.Debit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateOfCreation")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateOfExclusion")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateOfModify")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Debits");
                });

            modelBuilder.Entity("RC.CheckingAccount.Domain.Entities.Credit", b =>
                {
                    b.HasOne("RC.CheckingAccount.Domain.Entities.Client", null)
                        .WithMany("Credits")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("RC.CheckingAccount.Domain.Entities.Debit", b =>
                {
                    b.HasOne("RC.CheckingAccount.Domain.Entities.Client", null)
                        .WithMany("Debits")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("RC.CheckingAccount.Domain.Entities.Client", b =>
                {
                    b.Navigation("Credits");

                    b.Navigation("Debits");
                });
#pragma warning restore 612, 618
        }
    }
}
